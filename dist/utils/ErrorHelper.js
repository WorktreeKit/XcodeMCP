export class ErrorHelper {
    static createErrorWithGuidance(message, guidance) {
        return `${message}\n\nðŸ’¡ To fix this:\n${guidance}`;
    }
    static getXcodeNotFoundGuidance() {
        return [
            "â€¢ Install Xcode from the Mac App Store",
            "â€¢ Make sure Xcode is in your /Applications folder",
            "â€¢ Launch Xcode once to complete the installation",
            "â€¢ Accept the license agreement when prompted"
        ].join('\n');
    }
    static getProjectNotFoundGuidance(projectPath) {
        return [
            `â€¢ Check that the path is correct: ${projectPath}`,
            "â€¢ Use an absolute path (starting with /)",
            "â€¢ Make sure the file extension is .xcodeproj or .xcworkspace",
            "â€¢ Verify the project file hasn't been moved or deleted"
        ].join('\n');
    }
    static getSchemeNotFoundGuidance(schemeName, availableSchemes = []) {
        const guidance = [
            `â€¢ Check the scheme name spelling: '${schemeName}'`,
            "â€¢ Scheme names are case-sensitive"
        ];
        if (availableSchemes.length > 0) {
            guidance.push("â€¢ Available schemes:");
            availableSchemes.forEach(scheme => {
                guidance.push(`  - ${scheme}`);
            });
        }
        else {
            guidance.push("â€¢ Run 'Get Schemes' to see available schemes");
        }
        return guidance.join('\n');
    }
    static getDestinationNotFoundGuidance(destination, availableDestinations = []) {
        const guidance = [
            `â€¢ Check the destination name spelling: '${destination}'`,
            "â€¢ Destination names are case-sensitive"
        ];
        if (availableDestinations.length > 0) {
            guidance.push("â€¢ Available destinations:");
            availableDestinations.forEach(dest => {
                guidance.push(`  - ${dest}`);
            });
        }
        else {
            guidance.push("â€¢ Run 'Get Run Destinations' to see available destinations");
        }
        return guidance.join('\n');
    }
    static getXcodeNotRunningGuidance() {
        return [
            "â€¢ Launch Xcode application",
            "â€¢ Make sure Xcode is not stuck on a license agreement",
            "â€¢ Try restarting Xcode if it's already open",
            "â€¢ Check Activity Monitor for any hanging Xcode processes"
        ].join('\n');
    }
    static getNoWorkspaceGuidance() {
        return [
            "â€¢ Open a project in Xcode first",
            "â€¢ Make sure the project has finished loading",
            "â€¢ Try closing and reopening the project if it's already open",
            "â€¢ Check that the project file is not corrupted"
        ].join('\n');
    }
    static getBuildLogNotFoundGuidance() {
        return [
            "â€¢ Try building the project again",
            "â€¢ Check that Xcode has permission to write to derived data",
            "â€¢ Clear derived data (Product â†’ Clean Build Folder) and rebuild",
            "â€¢ Ensure XCLogParser is installed: brew install xclogparser"
        ].join('\n');
    }
    static getJXAPermissionGuidance() {
        return [
            "â€¢ Go to System Preferences â†’ Privacy & Security â†’ Automation",
            "â€¢ Allow your terminal app to control Xcode",
            "â€¢ You may need to restart your terminal after granting permission",
            "â€¢ If using VS Code, allow 'Code' to control Xcode"
        ].join('\n');
    }
    static parseCommonErrors(error) {
        const errorMessage = error.message || error.toString();
        if (errorMessage.includes('Xcode got an error: Application isn\'t running')) {
            return this.createErrorWithGuidance("Xcode is not running", this.getXcodeNotRunningGuidance());
        }
        if (errorMessage.includes('No active workspace')) {
            return this.createErrorWithGuidance("No active workspace found in Xcode", this.getNoWorkspaceGuidance());
        }
        if (errorMessage.includes('not allowed assistive access')) {
            return this.createErrorWithGuidance("Permission denied - automation access required", this.getJXAPermissionGuidance());
        }
        if (errorMessage.includes('osascript: command not found')) {
            return this.createErrorWithGuidance("macOS scripting tools not available", "â€¢ This MCP server requires macOS\nâ€¢ Make sure you're running on a Mac with osascript available");
        }
        return null;
    }
}
//# sourceMappingURL=ErrorHelper.js.map